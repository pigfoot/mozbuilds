Index: xpcom/glue/nsCOMPtr.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/nsCOMPtr.cpp,v
retrieving revision 1.28
diff -u -8 -p -r1.28 nsCOMPtr.cpp
--- xpcom/glue/nsCOMPtr.cpp	8 Jul 2007 07:08:51 -0000	1.28
+++ xpcom/glue/nsCOMPtr.cpp	11 Dec 2007 13:21:50 -0000
@@ -33,32 +33,34 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsCOMPtr.h"
 
+/*
 nsresult
 nsQueryInterface::operator()( const nsIID& aIID, void** answer ) const
 	{
 		nsresult status;
 		if ( mRawPtr )
 			{
 				status = mRawPtr->QueryInterface(aIID, answer);
 #ifdef NSCAP_FEATURE_TEST_NONNULL_QUERY_SUCCEEDS
 				NS_ASSERTION(NS_SUCCEEDED(status), "interface not found---were you expecting that?");
 #endif
 			}
 		else
 			status = NS_ERROR_NULL_POINTER;
 		
 		return status;
 	}
+*/
 
 nsresult
 nsQueryInterfaceWithError::operator()( const nsIID& aIID, void** answer ) const
 	{
 		nsresult status;
 		if ( mRawPtr )
 			{
 				status = mRawPtr->QueryInterface(aIID, answer);
@@ -69,48 +71,56 @@ nsQueryInterfaceWithError::operator()( c
 		else
 			status = NS_ERROR_NULL_POINTER;
 		
 		if ( mErrorPtr )
 			*mErrorPtr = status;
 		return status;
 	}
 
+/*
 nsCOMPtr_base::~nsCOMPtr_base()
 	{
 	  NSCAP_LOG_RELEASE(this, mRawPtr);
 		if ( mRawPtr )
 			NSCAP_RELEASE(this, mRawPtr);
 	}
+*/
 
+/*
 void
 nsCOMPtr_base::assign_with_AddRef( nsISupports* rawPtr )
 	{
     if ( rawPtr )
     	NSCAP_ADDREF(this, rawPtr);
     assign_assuming_AddRef(rawPtr);
 	}
+*/
 
+/*
 void
 nsCOMPtr_base::assign_from_qi( const nsQueryInterface qi, const nsIID& iid )
   {
     void* newRawPtr;
     if ( NS_FAILED( qi(iid, &newRawPtr) ) )
       newRawPtr = 0;
     assign_assuming_AddRef(static_cast<nsISupports*>(newRawPtr));
   }
+*/
 
+/*
 void
 nsCOMPtr_base::assign_from_qi_with_error( const nsQueryInterfaceWithError& qi, const nsIID& iid )
   {
     void* newRawPtr;
     if ( NS_FAILED( qi(iid, &newRawPtr) ) )
       newRawPtr = 0;
     assign_assuming_AddRef(static_cast<nsISupports*>(newRawPtr));
   }
+*/
 
 void
 nsCOMPtr_base::assign_from_gs_cid( const nsGetServiceByCID gs, const nsIID& iid )
   {
     void* newRawPtr;
     if ( NS_FAILED( gs(iid, &newRawPtr) ) )
       newRawPtr = 0;
     assign_assuming_AddRef(static_cast<nsISupports*>(newRawPtr));
@@ -138,23 +148,25 @@ void
 nsCOMPtr_base::assign_from_gs_contractid_with_error( const nsGetServiceByContractIDWithError& gs, const nsIID& iid )
   {
     void* newRawPtr;
     if ( NS_FAILED( gs(iid, &newRawPtr) ) )
       newRawPtr = 0;
     assign_assuming_AddRef(static_cast<nsISupports*>(newRawPtr));
   }
 
+/*
 void
 nsCOMPtr_base::assign_from_helper( const nsCOMPtr_helper& helper, const nsIID& iid )
   {
     void* newRawPtr;
     if ( NS_FAILED( helper(iid, &newRawPtr) ) )
       newRawPtr = 0;
     assign_assuming_AddRef(static_cast<nsISupports*>(newRawPtr));
   }
+*/
 
 void**
 nsCOMPtr_base::begin_assignment()
   {
     assign_assuming_AddRef(0);
     return reinterpret_cast<void**>(&mRawPtr);
   }
