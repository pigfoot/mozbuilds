Index: js/src/jsinterp.c
===================================================================
RCS file: /cvsroot/mozilla/js/src/jsinterp.c,v
retrieving revision 3.498
diff -u -8 -p -r3.498 jsinterp.c
--- js/src/jsinterp.c	28 May 2008 17:55:06 -0000	3.498
+++ js/src/jsinterp.c	4 Jun 2008 20:36:06 -0000
@@ -36,16 +36,19 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /*
  * JavaScript bytecode interpreter.
  */
+#if _MSC_VER >= 1400
+#include <intrin.h>
+#endif
 #include "jsstddef.h"
 #include <stdio.h>
 #include <string.h>
 #include <math.h>
 #include "jstypes.h"
 #include "jsarena.h" /* Added by JSIFY */
 #include "jsutil.h" /* Added by JSIFY */
 #include "jsprf.h"
@@ -601,17 +604,21 @@ js_AllocStack(JSContext *cx, uintN nslot
         sp += 2;
     }
 
     /*
      * Store JSVAL_NULL using memset, to let compilers optimize as they see
      * fit, in case a caller allocates and pushes GC-things one by one, which
      * could nest a last-ditch GC that will scan this segment.
      */
+#if _MSC_VER >= 1400
+    __stosd(sp, 0, nslots);
+#else
     memset(sp, 0, nslots * sizeof(jsval));
+#endif
     return sp;
 }
 
 JS_FRIEND_API(void)
 js_FreeStack(JSContext *cx, void *mark)
 {
     JSStackHeader *sh;
     jsuword slotdiff;
@@ -1359,17 +1366,21 @@ js_InternalInvoke(JSContext *cx, JSObjec
     JSBool ok;
 
     invokevp = js_AllocStack(cx, 2 + argc, &mark);
     if (!invokevp)
         return JS_FALSE;
 
     invokevp[0] = fval;
     invokevp[1] = OBJECT_TO_JSVAL(obj);
+#if _MSC_VER >= 1400
+    __movsd(invokevp + 2, argv, argc);
+#else
     memcpy(invokevp + 2, argv, argc * sizeof *argv);
+#endif
 
     ok = js_Invoke(cx, argc, invokevp, flags);
     if (ok) {
         /*
          * Store *rval in the a scoped local root if a scope is open, else in
          * the lastInternalResult pigeon-hole GC root, solely so users of
          * js_InternalInvoke and its direct and indirect (js_ValueToString for
          * example) callers do not need to manage roots for local, temporary
